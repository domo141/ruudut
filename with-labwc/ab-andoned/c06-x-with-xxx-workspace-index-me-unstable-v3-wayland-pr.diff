Date: Mon, 29 Apr 2024 19:35:21 +0300
Subject: x with xxx-workspace-index-me-unstable-v3 wayland protocol

---
 ...-workspace-index-me-unstable-v3-protocol.c |  38 +++++++
 ...ace-index-me-unstable-v3-server-protocol.h |  88 +++++++++++++++
 .../xxx/xxx-workspace-index-me-unstable-v3.ch | 103 ++++++++++++++++++
 .../xxx-workspace-index-me-unstable-v3.xml    |  26 +++++
 src/workspaces.c                              |   8 ++
 5 files changed, 263 insertions(+)

diff --git ... b/include/xxx/xxx-workspace-index-me-unstable-v3-protocol.c
new file mode 100644
index 00000000..2d0c0fba
--- /dev/null
+++ b/include/xxx/xxx-workspace-index-me-unstable-v3-protocol.c
@@ -0,0 +1,38 @@
+/* Generated by wayland-scanner 1.23.0  (trailing space post-cleaned) */
+
+/* Unlicense
+ */
+
+#include <stdbool.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include "wayland-util.h"
+
+#ifndef __has_attribute
+# define __has_attribute(x) 0  /* Compatibility with non-clang compilers. */
+#endif
+
+#if (__has_attribute(visibility) || defined(__GNUC__) && __GNUC__ >= 4)
+#define WL_PRIVATE __attribute__ ((visibility("hidden")))
+#else
+#define WL_PRIVATE
+#endif
+
+
+static const struct wl_interface *xxx_workspace_index_me_v3_types[] = {
+	NULL,
+};
+
+static const struct wl_message zxxx_workspace_index_me_v3_requests[] = {
+	{ "workspace_index_me", "", xxx_workspace_index_me_v3_types + 0 },
+};
+
+static const struct wl_message zxxx_workspace_index_me_v3_events[] = {
+	{ "workspace_index", "u", xxx_workspace_index_me_v3_types + 0 },
+};
+
+WL_PRIVATE const struct wl_interface zxxx_workspace_index_me_v3_interface = {
+	"zxxx_workspace_index_me_v3", 1,
+	1, zxxx_workspace_index_me_v3_requests,
+	1, zxxx_workspace_index_me_v3_events,
+};
diff --git ... b/include/xxx/xxx-workspace-index-me-unstable-v3-server-protocol.h
new file mode 100644
index 00000000..c2300e45
--- /dev/null
+++ b/include/xxx/xxx-workspace-index-me-unstable-v3-server-protocol.h
@@ -0,0 +1,88 @@
+/* Generated by wayland-scanner 1.23.0  (trailing space post-cleaned) */
+
+#ifndef XXX_WORKSPACE_INDEX_ME_V3_SERVER_PROTOCOL_H
+#define XXX_WORKSPACE_INDEX_ME_V3_SERVER_PROTOCOL_H
+
+#include <stdint.h>
+#include <stddef.h>
+#include "wayland-server.h"
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+struct wl_client;
+struct wl_resource;
+
+/**
+ * @page page_xxx_workspace_index_me_v3 The xxx_workspace_index_me_v3 protocol
+ * @section page_ifaces_xxx_workspace_index_me_v3 Interfaces
+ * - @subpage page_iface_zxxx_workspace_index_me_v3 - xxx workspace index me protocol 3, version 1
+ * @section page_copyright_xxx_workspace_index_me_v3 Copyright
+ * <pre>
+ * Unlicense
+ * </pre>
+ */
+struct zxxx_workspace_index_me_v3;
+
+#ifndef ZXXX_WORKSPACE_INDEX_ME_V3_INTERFACE
+#define ZXXX_WORKSPACE_INDEX_ME_V3_INTERFACE
+/**
+ * @page page_iface_zxxx_workspace_index_me_v3 zxxx_workspace_index_me_v3
+ * @section page_iface_zxxx_workspace_index_me_v3_desc Description
+ *
+ * For users to know which workspace is currently active.
+ * @section page_iface_zxxx_workspace_index_me_v3_api API
+ * See @ref iface_zxxx_workspace_index_me_v3.
+ */
+/**
+ * @defgroup iface_zxxx_workspace_index_me_v3 The zxxx_workspace_index_me_v3 interface
+ *
+ * For users to know which workspace is currently active.
+ */
+extern const struct wl_interface zxxx_workspace_index_me_v3_interface;
+#endif
+
+/**
+ * @ingroup iface_zxxx_workspace_index_me_v3
+ * @struct zxxx_workspace_index_me_v3_interface
+ */
+struct zxxx_workspace_index_me_v3_interface {
+	/**
+	 * ask for workspace 'index' when changes
+	 *
+	 * Request compositor to send 'workspace_index' event when
+	 * workspace changes.
+	 */
+	void (*workspace_index_me)(struct wl_client *client,
+				   struct wl_resource *resource);
+};
+
+#define ZXXX_WORKSPACE_INDEX_ME_V3_WORKSPACE_INDEX 0
+
+/**
+ * @ingroup iface_zxxx_workspace_index_me_v3
+ */
+#define ZXXX_WORKSPACE_INDEX_ME_V3_WORKSPACE_INDEX_SINCE_VERSION 1
+
+/**
+ * @ingroup iface_zxxx_workspace_index_me_v3
+ */
+#define ZXXX_WORKSPACE_INDEX_ME_V3_WORKSPACE_INDEX_ME_SINCE_VERSION 1
+
+/**
+ * @ingroup iface_zxxx_workspace_index_me_v3
+ * Sends an workspace_index event to the client owning the resource.
+ * @param resource_ The client's resource
+ */
+static inline void
+zxxx_workspace_index_me_v3_send_workspace_index(struct wl_resource *resource_, uint32_t index)
+{
+	wl_resource_post_event(resource_, ZXXX_WORKSPACE_INDEX_ME_V3_WORKSPACE_INDEX, index);
+}
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif
diff --git ... b/include/xxx/xxx-workspace-index-me-unstable-v3.ch
new file mode 100644
index 00000000..ac4d4455
--- /dev/null
+++ b/include/xxx/xxx-workspace-index-me-unstable-v3.ch
@@ -0,0 +1,103 @@
+// -*- mode: c; c-file-style: "linux" -*- //
+
+#if XXX_CODE_FOR_WORKSPACES_C != 1
+#error not included as expected
+#endif
+#undef XXX_CODE_FOR_WORKSPACES_C
+#define XXX_CODE_FOR_WORKSPACES_C 2
+
+/*
+// wayland-scanner server-header xxx-workspace-index-me-unstable-v3.xml \
+//	xxx-workspace-index-me-unstable-v3-server-protocol.h
+// wayland-scanner private-code xxx-workspace-index-me-unstable-v3.xml \
+//	xxx-workspace-index-me-unstable-v3-protocol.c
+// trailing space post-cleaned manually
+*/
+
+#include "xxx/xxx-workspace-index-me-unstable-v3-server-protocol.h"
+#include "xxx/xxx-workspace-index-me-unstable-v3-protocol.c"
+
+static struct wl_resource *xxx_ws_resource = NULL;
+
+static int
+xxx_send_workspace_index_(void *data)
+{
+	if (xxx_ws_resource == NULL) return 0;
+
+	__auto_type server = (const struct server *)data;
+
+	if (server->workspaces.current == NULL) {
+		return 0;
+	}
+	__auto_type current = server->workspaces.current;
+	struct workspace *target;
+
+	unsigned char c = 1;
+	wl_list_for_each(target, &server->workspaces.all, link) {
+		if (target == current) {
+			zxxx_workspace_index_me_v3_send_workspace_index(
+				xxx_ws_resource, c);
+			break;
+		}
+		c++;
+	}
+	return 0;
+}
+
+static struct wl_event_source *xxx_ws_index_timer;
+static void
+xxx_workspace_changed(void)
+{
+	// slow enough for key repeat and mouse wheel //
+	wl_event_source_timer_update(xxx_ws_index_timer, 52);
+}
+
+static void
+xxx_workspace_index_me(struct wl_client *client, struct wl_resource *resource)
+{
+	xxx_ws_resource = resource;
+	xxx_workspace_changed();
+}
+
+static const struct zxxx_workspace_index_me_v3_interface
+xxx_workspace_index_me_interface = {
+	.workspace_index_me = xxx_workspace_index_me
+};
+
+
+static void
+xxx_workspace_index_me_handle_resource_destroy(struct wl_resource *resource)
+{
+	if (xxx_ws_resource == resource) xxx_ws_resource = NULL;
+}
+
+static void
+xxx_workspace_index_me_handle_bind(struct wl_client *client, void *data,
+				   uint32_t version, uint32_t id)
+{
+	struct wl_resource *resource = wl_resource_create(
+		client, &zxxx_workspace_index_me_v3_interface,
+		zxxx_workspace_index_me_v3_interface.version, id
+	);
+	wl_resource_set_implementation(
+		resource,
+		&xxx_workspace_index_me_interface,
+		NULL,
+		xxx_workspace_index_me_handle_resource_destroy);
+}
+
+static void
+xxx_workspace_index_me_v3_create(struct wl_display *display)
+{
+	wl_global_create(display, &zxxx_workspace_index_me_v3_interface,
+			 1, NULL, xxx_workspace_index_me_handle_bind);
+}
+
+static void
+xxx_workspace_index_me_v3_init(struct server *server)
+{
+	xxx_ws_index_timer = wl_event_loop_add_timer(
+		server->wl_event_loop, xxx_send_workspace_index_, server);
+
+	xxx_workspace_index_me_v3_create(server->wl_display);
+}
diff --git ... b/include/xxx/xxx-workspace-index-me-unstable-v3.xml
new file mode 100644
index 00000000..28f270c3
--- /dev/null
+++ b/include/xxx/xxx-workspace-index-me-unstable-v3.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="xxx_workspace_index_me_unstable_v3">
+  <copyright> Unlicense </copyright>
+
+  <interface name="zxxx_workspace_index_me_v3" version="1">
+    <description summary="workspace index me, v3, version 1">
+      Minimal wayland protocol to give user hint of a workspace
+      (by number).
+    </description>
+
+    <request name="workspace_index_me">
+      <description summary="ask for workspace 'index' when changes">
+        Request compositor to send 'workspace_index' event
+        when workspace changes.
+      </description>
+    </request>
+
+    <event name="workspace_index">
+      <description summary="workspace 'index' that is">
+        Sent by compositor when workspace changes.
+      </description>
+      <arg name="index" type="uint"/>
+    </event>
+
+  </interface>
+</protocol>
diff --git a/src/workspaces.c b/src/workspaces.c
index 79f5e018..cf2659bf 100644
--- a/src/workspaces.c
+++ b/src/workspaces.c
@@ -21,6 +21,10 @@
 #include "workspaces.h"
 #include "xwayland.h"
 
+#define XXX_CODE_FOR_WORKSPACES_C 1
+#include "xxx/xxx-workspace-index-me-unstable-v3.ch"
+#undef XXX_CODE_FOR_WORKSPACES_C
+
 #define COSMIC_WORKSPACES_VERSION 1
 #define EXT_WORKSPACES_VERSION 1
 
@@ -330,6 +334,8 @@ workspaces_init(struct server *server)
 	wl_list_for_each(conf, &rc.workspace_config.workspaces, link) {
 		add_workspace(server, conf->name);
 	}
+
+	xxx_workspace_index_me_v3_init(server);
 }
 
 /*
@@ -412,6 +418,8 @@ workspaces_switch_to(struct workspace *target, bool update_focus)
 
 	lab_cosmic_workspace_set_active(target->cosmic_workspace, true);
 	lab_ext_workspace_set_active(target->ext_workspace, true);
+
+	xxx_workspace_changed();
 }
 
 void
